# Generated by Django 5.1.5 on 2025-06-30 06:21

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emergency_mode_active', models.BooleanField(default=False)),
                ('detection_interval', models.FloatField(default=0.1, help_text='Detection loop interval in seconds')),
                ('control_interval', models.FloatField(default=0.1, help_text='Control loop interval in seconds')),
                ('log_retention_days', models.IntegerField(default=30, help_text='Days to retain logs')),
                ('yolo_model_path', models.CharField(default='my_model (1).pt', max_length=500)),
                ('confidence_threshold', models.FloatField(default=0.25)),
                ('iou_threshold', models.FloatField(default=0.45)),
            ],
            options={
                'verbose_name_plural': 'System Settings',
                'db_table': 'system_settings',
            },
        ),
        migrations.CreateModel(
            name='TrafficSignal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal_id', models.IntegerField(help_text='Signal ID (0-3 for A, B, C, D)', unique=True)),
                ('current_state', models.CharField(choices=[('RED', 'Red'), ('YELLOW', 'Yellow'), ('GREEN', 'Green')], default='RED', max_length=10)),
                ('remaining_time', models.FloatField(default=0.0, help_text='Remaining time in current state')),
                ('vehicle_count', models.IntegerField(default=0)),
                ('traffic_weight', models.FloatField(default=0.0)),
                ('avg_confidence', models.FloatField(default=0.0)),
                ('vehicle_type_counts', models.JSONField(default=dict, help_text='Counts for each vehicle type')),
                ('min_green_time', models.IntegerField(default=10)),
                ('max_green_time', models.IntegerField(default=45)),
                ('default_green_time', models.IntegerField(default=15)),
                ('yellow_time', models.IntegerField(default=3)),
                ('all_red_time', models.IntegerField(default=2)),
                ('calculated_green_time', models.IntegerField(default=15)),
                ('pending_green_time', models.IntegerField(default=0)),
                ('congestion_level', models.CharField(choices=[('LOW', 'Low'), ('MODERATE', 'Moderate'), ('HIGH', 'High'), ('SEVERE', 'Severe')], default='LOW', max_length=10)),
                ('congestion_score', models.FloatField(default=0.0)),
                ('has_emergency_vehicle', models.BooleanField(default=False)),
                ('emergency_vehicle_detected_time', models.DateTimeField(blank=True, null=True)),
                ('emergency_vehicle_wait_time', models.FloatField(default=0.0)),
                ('last_update_time', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'traffic_signals',
                'ordering': ['signal_id'],
            },
        ),
        migrations.CreateModel(
            name='TrafficLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event_type', models.CharField(choices=[('STATE_CHANGE', 'State Change'), ('EMERGENCY_OVERRIDE', 'Emergency Override'), ('EMERGENCY_EXTEND', 'Emergency Extension'), ('DETECTION_UPDATE', 'Detection Update'), ('CONGESTION_ALERT', 'Congestion Alert'), ('TIMING_ADJUSTMENT', 'Timing Adjustment')], max_length=50)),
                ('details', models.JSONField(default=dict, help_text='Additional event details')),
                ('signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='new_application.trafficsignal')),
            ],
            options={
                'db_table': 'traffic_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SignalTimingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('green_time', models.IntegerField()),
                ('yellow_time', models.IntegerField()),
                ('red_time', models.IntegerField()),
                ('reason', models.CharField(blank=True, max_length=255, null=True)),
                ('signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timing_logs', to='new_application.trafficsignal')),
            ],
            options={
                'db_table': 'signal_timing_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DetectionArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_points', models.JSONField(help_text='List of [x, y] coordinates defining the detection area')),
                ('area_size', models.FloatField(default=0.0, help_text='Calculated area size')),
                ('signal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detection_area', to='new_application.trafficsignal')),
            ],
            options={
                'db_table': 'detection_areas',
            },
        ),
        migrations.CreateModel(
            name='CongestionEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MODERATE', 'Moderate'), ('HIGH', 'High'), ('SEVERE', 'Severe')], max_length=10)),
                ('cause', models.CharField(max_length=255)),
                ('resolution_time', models.IntegerField(blank=True, help_text='Time to resolve in seconds', null=True)),
                ('signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='congestion_events', to='new_application.trafficsignal')),
            ],
            options={
                'db_table': 'congestion_events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='VideoSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_path', models.CharField(help_text='Path to video file or RTSP stream', max_length=500)),
                ('is_active', models.BooleanField(default=True)),
                ('last_frame_time', models.DateTimeField(blank=True, null=True)),
                ('signal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='video_source', to='new_application.trafficsignal')),
            ],
            options={
                'db_table': 'video_sources',
            },
        ),
    ]
